pipelines:
  - name: "BBC News Report Generator (Old)"
    description: "Generates reports for important news stories from BBC News RSS feed"
    steps:
      - name: "Fetch BBC News RSS Feed"
        plugin: "Input.rss_feed"
        config:
          url: "https://feeds.bbci.co.uk/news/world/rss.xml?edition=uk"
          feed_name: "BBC_News"
        output: "feed_BBC_News"

      - name: "Process Stories"
        iterate: "context.get('feed_BBC_News', [])[:5]"  # Limit to 5 stories
        steps:
          - name: "Delay Before Importance"
            plugin: "Data_Processing.Delay"
            config:
              seconds: 5
            output: "delay_before_importance"

          - name: "Determine Importance"
            plugin: "Data_Processing.LLMFunction"
            config:
              plugin: "OpenRouter"
              model: "meta-llama/llama-4-maverick:free"
              function: |
                You are a program block that takes RSS feed items and determines importance on a scale of 1-10.
                Your ONLY output should be a single valid Python dictionary in the format {'score': <number>} (e.g., {'score': 7}).
                Do not include any explanation, commentary, or extra text. Only output the dictionary.
              format: "response"
              mock_response: {"score": 8}
            input: "item['title']"
            output: "importance_score"

          - name: "Convert Importance Score to Dictionary"
            plugin: "Data_Processing.FormatConverter"
            config:
              input_key: "importance_score"
              output_key: "importance_score"
              conversion_type: "string_to_dict"
              strict_json: false

          - name: "Process Important Story"
            plugin: "Data_Processing.RuleEngine"
            config:
              operation: "evaluate"
              input_key: "importance_score"
              condition: "eval(context['importance_score'])['score'] > 7"
            output: "rule_engine_result"
          - name: "Delay Before Section Prompt"
            plugin: "Data_Processing.Delay"
            config:
              seconds: 5
            output: "delay_before_section_prompt"

          - name: "Generate Section Prompt"
            plugin: "Data_Processing.LLMFunction"
            config:
              plugin: "OpenRouter"
              model: "meta-llama/llama-4-maverick:free"
              function: |
                You are a program block that generates a single, strong prompt for summarizing a news story. Your ONLY output should be a single valid Python dictionary in the format {'section_prompt': <prompt_string>}.
                Do not include any explanation, commentary, or extra text. Only output the dictionary.
                The prompt should instruct an LLM to write a concise, well-structured summary section for a news report, including all available details (title, description, link), and enforce output as a Python dict with a 'section_summary' key.
              format: "response"
              mock_response: {"section_prompt": "Write a summary for this news item."}
            input: "item"
            output: "section_prompt"

          - name: "Convert Section Prompt to Dictionary"
            plugin: "Data_Processing.FormatConverter"
            config:
              input_key: "section_prompt"
              output_key: "section_prompt"
              conversion_type: "string_to_dict"
              strict_json: false

          - name: "Generate Section Summary"
            plugin: "Data_Processing.LLMFunction"
            config:
              plugin: "OpenRouter"
              model: "meta-llama/llama-4-maverick:free"
              function: |
                You are a program block that generates a concise, informative section summary for a news story. Use the following details:
                - Title: {title}
                - Description: {description}
                - Link: {link}
                Use the provided prompt for additional guidance: {section_prompt.section_prompt}
                Output ONLY a valid Python dictionary in the format: {'section_summary': <summary text>}.
                Do not add any explanation or commentary. Your output MUST be a Python dict with a single key 'section_summary'.
              format: "response"
              mock_response: {"section_summary": "This is a mock section summary for testing."}
            input: "{'title': item['title'], 'description': item.get('description', ''), 'link': item.get('link', ''), 'section_prompt': section_prompt}"
            output: "section_summary"

          - name: "Convert Section Summary to Dictionary"
            plugin: "Data_Processing.FormatConverter"
            config:
              input_key: "section_summary"
              output_key: "section_summary"
              conversion_type: "string_to_dict"
              strict_json: false

          - name: "Build Section Data"
            plugin: "Data_Processing.ContextPromoter"
            source: "item"
            target: "section_data"

          - name: "Add Importance and Summary to Section Data"
            plugin: "Data_Processing.ContextPromoter"
            source: "importance_score"
            target: "section_data['importance']"

          - name: "Add Section Summary to Section Data"
            plugin: "Data_Processing.ContextPromoter"
            source: "section_summary"
            target: "section_data['section_summary']"

          - name: "Ensure All Fields Have Valid Values"
            plugin: "Data_Processing.ContextPromoter"
            source: |
              # Get section_data from context or use a default
              s = context.get('section_data', {})
              if s is None:
                  # If section_data is None, create a new dict with required fields
                  s = {
                      'title': context.get('item', {}).get('title', 'No title available'),
                      'description': context.get('item', {}).get('description', 'No description available'),
                      'link': context.get('item', {}).get('link', 'No link available'),
                      'importance': context.get('importance_score', {}).get('score', 'N/A'),
                      'section_summary': context.get('section_summary', {}).get('section_summary', 'No summary available')
                  }
              else:
                  # Otherwise, copy and process the existing data
                  s = s.copy()
                  importance = s.get('importance', {})
                  if isinstance(importance, dict):
                      importance_score = importance.get('score', 'N/A')
                  else:
                      importance_score = str(importance) if importance is not None else 'N/A'
                  s['importance'] = str(importance_score)

                  section_summary = s.get('section_summary', {})
                  if isinstance(section_summary, dict):
                      summary = section_summary.get('section_summary', 'No summary available')
                  else:
                      summary = str(section_summary) if section_summary is not None else 'No summary available'
                  s['section_summary'] = summary

                  s['description'] = s.get('description', 'No description available')
              s
            target: "section_data"
          - name: "Log Context After Ensure Fields"
            plugin: "Data_Processing.ContextLogger"
            config:
              log_values: true

          - name: "Collect Section Data"
            plugin: "Data_Processing.ContextAggregator"
            config:
              key: "section_summaries"
              value: "section_data"
              required_keys:
                - title
                - importance
                - description
                - link
                - section_summary
            output: "section_summaries"
          - name: "Log Context Before Generating HTML"
            plugin: "Data_Processing.ContextLogger"
            config:
              log_values: true

      - name: "Generate HTML Report"
        plugin: "Output.HTMLReport"
        config:
          title: "BBC News Report"
          sections: |
            [
              {
                'heading': s['title'],
                'text': (
                  '<b>Importance:</b> ' + s['importance'] +
                  '<br><b>Description:</b> ' + s['description'] +
                  '<br><b>Link:</b> <a href="' + s['link'] + '">' + s['link'] + '</a>' +
                  '<br><b>Summary:</b> ' + s['section_summary']
                )
              }
              for s in context.get('section_summaries', [])
            ]
        output: "report.html"
